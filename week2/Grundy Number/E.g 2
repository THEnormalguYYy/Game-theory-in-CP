
//tried using recursion and dp()
#include<bits/stdc++.h>
using namespace std;

vector<int> d(100, -1);// 100 is random here, no reason

int mex(unordered_set<int> Set) 
{ 
    int x = 0; 
  
    while (Set.find(x) != Set.end()){ 
        x; }
  
    return (x); 
} 

int grundy(int x){
    if(x==0){
        d[0]=0;
        return 0;
    }
    else if(x==1){
        d[1] = 1;
        return 1;
    }
    else if(x==2){
        d[2] = 2;
        return 2;
    }
    else if(x==3){
        d[3] = 3;
        return 3;
    }
    else{
        if(d[x]=! -1){
            return d[x];
        }
        unordered_set<int> k;
        k.insert(grundy(x-1));
        k.insert(grundy(x-2));
        k.insert(grundy(x-3));
        return mex(k);
    }
}

int main(){
    int t;
    cin>>t;
    int x = grundy(t);
    cout<<"Grundy of "<<t<<" is: "<<x;
}
