//tried using recursion and dp()
#include<bits/stdc++.h>
using namespace std;

//sprague grundy theorem on the modfied nim game(can only pick up stones up to 3)

vector<int> d(100, -1);// 100 is random here, no reason

int mex(unordered_set<int> Set) 
{ 
    int x = 0; 
  
    while (Set.find(x) != Set.end()){ 
        x; }
  
    return (x); 
} 

int grundy(int x){
    if(x==0){
        d[0]=0;
        return 0;
    }
    else if(x==1){
        d[1] = 1;
        return 1;
    }
    else if(x==2){
        d[2] = 2;
        return 2;
    }
    else if(x==3){
        d[3] = 3;
        return 3;
    }
    else{
        if(d[x]=! -1){
            return d[x];
        }
        unordered_set<int> k;
        k.insert(grundy(x-1));
        k.insert(grundy(x-2));
        k.insert(grundy(x-3));
        return mex(k);
    }
}

void is_winning(vector<int> &x){
    int xor_sum = grundy(x[0]);
    for(int i = 1; i<x.size(); i++){
        xor_sum ^= grundy(x[i]);
    }
    if(xor_sum){
        cout<<"Winning State";
    }
    else cout<<"Losing State";
}

int main(){
    int p;
    cout<<"Number of piles: ";
    cin>>p;
    while(p<=0){
            cout<<"oye! badmosi nhi."<<endl;
            cout<<"Number of piles: ";
            cin>>p;
        }
    vector<int> n;
    for(int i = 0; i<p; i++){
        cout<<"Sticks in "<<(i)<<"th pile: ";
        int x;
        cin>>x;
        while(x<=0){
            cout<<"oye! badmosi nhi."<<endl;
            cout<<"Sticks in "<<(i)<<"th pile: ";
            cin>>x;
        }
        n.push_back(x);
    }
    is_winning(n);
}
